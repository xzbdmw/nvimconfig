return {
    "ray-x/navigator.lua",
    enabled = false,
    dependencies = { {
        "ray-x/guihua.lua",
    } },
    config = function()
        require("navigator").setup({
            -- debug = false, -- log output, set to true and log path: ~/.cache/nvim/gh.log
            -- -- slowdownd startup and some actions
            -- width = 0.75, -- max width ratio (number of cols for the floating window) / (window width)
            -- height = 0.3, -- max list window height, 0.3 by default
            -- preview_height = 0.35, -- max height of preview windows
            -- border = { "‚ï≠", "‚îÄ", "‚ïÆ", "‚îÇ", "‚ïØ", "‚îÄ", "‚ï∞", "‚îÇ" }, -- border style, can be one of 'none', 'single', 'double',
            -- -- 'shadow', or a list of chars which defines the border
            -- on_attach = function(client, bufnr)
            --     -- your hook
            -- end,
            -- ts_fold = {
            --     enable = false,
            --     comment_fold = true, -- fold with comment string
            --     max_lines_scan_comments = 20, -- only fold when the fold level higher than this value
            --     disable_filetypes = { "help", "guihua", "text" }, -- list of filetypes which doesn't fold using treesitter
            -- }, -- modified version of treesitter folding
            -- default_mapping = true, -- set to false if you will remap every key or if you using old version of nvim-
            -- keymaps = { { key = "gK", func = vim.lsp.declaration, desc = "declaration" } }, -- a list of key maps
            -- -- this kepmap gK will override "gD" mapping function declaration()  in default kepmap
            -- -- please check mapping.lua for all keymaps
            -- -- rule of overriding: if func and mode ('n' by default) is same
            -- -- it can be overrided
            -- treesitter_analysis = true, -- treesitter variable context
            -- treesitter_navigation = true, -- bool|table false: use lsp to navigate between symbol ']r/[r', table: a list of
            -- --lang using TS navigation
            -- treesitter_analysis_max_num = 100, -- how many items to run treesitter analysis
            -- treesitter_analysis_condense = true, -- condense form for treesitter analysis
            -- -- this value prevent slow in large projects, e.g. found 100000 reference in a project
            -- transparency = 50, -- 0 ~ 100 blur the main window, 100: fully transparent, 0: opaque,  set to nil or 100 to disable it
            --
            -- lsp_signature_help = false, -- if you would like to hook ray-x/lsp_signature plugin in navigator
            -- -- setup here. if it is nil, navigator will not init signature help
            -- signature_help_cfg = nil, -- if you would like to init ray-x/lsp_signature plugin in navigator, and pass in your own config to signature help
            -- icons = { -- refer to lua/navigator.lua for more icons config
            --     -- requires nerd fonts or nvim-web-devicons
            --     icons = true,
            --     -- Code action
            --     code_action_icon = "üèè", -- note: need terminal support, for those not support unicode, might crash
            --     -- Diagnostics
            --     diagnostic_head = "üêõ",
            --     diagnostic_head_severity_1 = "üà≤",
            --     fold = {
            --         prefix = "‚ö°", -- icon to show before the folding need to be 2 spaces in display width
            --         separator = "Ôëõ", -- e.g. shows ÔëõÔëõÔëõÔëõ  3 lines ÔëõÔëõÔëõÔëõ
            --     },
            -- },
            -- mason = false, -- set to true if you would like use the lsp installed by williamboman/mason
            -- lsp = {
            --     enable = true, -- skip lsp setup, and only use treesitter in navigator.
            --     -- Use this if you are not using LSP servers, and only want to enable treesitter support.
            --     -- If you only want to prevent navigator from touching your LSP server configs,
            --     -- use `disable_lsp = "all"` instead.
            --     -- If disabled, make sure add require('navigator.lspclient.mapping').setup({bufnr=bufnr, client=client}) in your
            --     -- own on_attach
            --     code_action = { enable = true, sign = true, sign_priority = 40, virtual_text = true },
            --     code_lens_action = { enable = true, sign = true, sign_priority = 40, virtual_text = true },
            --     document_highlight = true, -- LSP reference highlight,
            --     -- it might already supported by you setup, e.g. LunarVim
            --     format_on_save = true, -- {true|false} set to false to disasble lsp code format on save (if you are using prettier/efm/formater etc)
            --     -- table: {enable = {'lua', 'go'}, disable = {'javascript', 'typescript'}} to enable/disable specific language
            --     -- enable: a whitelist of language that will be formatted on save
            --     -- disable: a blacklist of language that will not be formatted on save
            --     -- function: function(bufnr) return true end to enable/disable lsp format on save
            --     format_options = { async = false }, -- async: disable by default, the option used in vim.lsp.buf.format({async={true|false}, name = 'xxx'})
            --     disable_format_cap = { "sqlls", "lua_ls", "gopls" },
            --     diagnostic = {
            --         underline = true,
            --         virtual_text = true, -- show virtual for diagnostic message
            --         update_in_insert = false, -- update diagnostic message in insert mode
            --         float = { -- setup for floating windows style
            --             focusable = false,
            --             sytle = "minimal",
            --             border = "rounded",
            --             source = "always",
            --             header = "",
            --             prefix = "ÔÜà",
            --         },
            --     },
            --     hover = {
            --         enable = true,
            --         keymap = {
            --             ["<C-k>"] = {
            --                 go = function()
            --                     local w = vim.fn.expand("<cWORD>")
            --                     vim.cmd("GoDoc " .. w)
            --                 end,
            --                 default = function()
            --                     local w = vim.fn.expand("<cWORD>")
            --                     vim.lsp.buf.workspace_symbol(w)
            --                 end,
            --             },
            --         },
            --     },
            --     diagnostic_scrollbar_sign = { "‚ñÉ", "‚ñÜ", "‚ñà" }, -- experimental:  diagnostic status in scroll bar area; set to false to disable the diagnostic sign,
            --     --                for other style, set to {'‚ïç', 'ÔÆÜ'} or {'-', '='}
            --     diagnostic_virtual_text = true, -- show virtual for diagnostic message
            --     diagnostic_update_in_insert = false, -- update diagnostic message in insert mode
            --     display_diagnostic_qf = true, -- always show quickfix if there are diagnostic errors, set to false if you want to ignore it
            --     -- set to 'trouble' to show diagnositcs in Trouble
            --     tsserver = {
            --         filetypes = { "typescript" }, -- disable javascript etc,
            --         -- set to {} to disable the lspclient for all filetypes
            --     },
            --     ctags = {
            --         cmd = "ctags",
            --         tagfile = "tags",
            --         options = "-R --exclude=.git --exclude=node_modules --exclude=test --exclude=vendor --excmd=number",
            --     },
            --     gopls = { -- gopls setting
            --         on_attach = function(client, bufnr) -- on_attach for gopls
            --             -- your special on attach here
            --             -- e.g. disable gopls format because a known issue https://github.com/golang/go/issues/45732
            --             print("i am a hook, I will disable document format")
            --             client.resolved_capabilities.document_formatting = false
            --         end,
            --         settings = {
            --             gopls = { gofumpt = false }, -- disable gofumpt etc,
            --         },
            --     },
            --     -- the lsp setup can be a function, .e.g
            --     gopls = function()
            --         local go = pcall(require, "go")
            --         if go then
            --             local cfg = require("go.lsp").config()
            --             cfg.on_attach = function(client)
            --                 client.server_capabilities.documentFormattingProvider = false -- efm/null-ls
            --             end
            --             return cfg
            --         end
            --     end,
            --
            --     lua_ls = {
            --         sumneko_root_path = vim.fn.expand("$HOME") .. "/github/sumneko/lua-language-server",
            --         sumneko_binary = vim.fn.expand("$HOME")
            --             .. "/github/sumneko/lua-language-server/bin/macOS/lua-language-server",
            --     },
            --     servers = { "cmake", "ltex" },
            --     -- hover = {
            --     --       enable = true,
            --     --       keymap = {
            --     --         ['<C-k>'] = {
            --     --           go = function()
            --     --             local w = vim.fn.expand('<cWORD>')
            --     --             vim.cmd('GoDoc ' .. w)
            --     --           end,
            --     --           default = function()
            --     --             local w = vim.fn.expand('<cWORD>')
            --     --             vim.lsp.buf.workspace_symbol(w)
            --     --           end,
            --     --         },
            --     --       },
            -- },
        })
    end,
}
